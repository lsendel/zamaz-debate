#!/bin/bash
# Pre-commit hook to prevent committing sensitive information

echo "üîç Checking for sensitive information..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check for API keys and secrets
check_patterns() {
    local file=$1
    local found=0
    
    # Skip binary files
    if file -b "$file" | grep -q "text"; then
        # Patterns to check for
        if grep -HnE "(sk-ant-api|AIza[a-zA-Z0-9_-]{35}|api[_-]?key|secret[_-]?key|password|token)" "$file" 2>/dev/null | grep -v ".env.example"; then
            echo -e "${RED}‚ùå Found potential sensitive data in: $file${NC}"
            found=1
        fi
        
        # Check for hardcoded API keys
        if grep -HnE "ANTHROPIC_API_KEY\s*=\s*['\"]sk-" "$file" 2>/dev/null; then
            echo -e "${RED}‚ùå Found hardcoded Anthropic API key in: $file${NC}"
            found=1
        fi
        
        if grep -HnE "GOOGLE_API_KEY\s*=\s*['\"]AIza" "$file" 2>/dev/null; then
            echo -e "${RED}‚ùå Found hardcoded Google API key in: $file${NC}"
            found=1
        fi
    fi
    
    return $found
}

# Get list of staged files
staged_files=$(git diff --cached --name-only)
found_secrets=0

for file in $staged_files; do
    if [ -f "$file" ]; then
        check_patterns "$file"
        if [ $? -eq 1 ]; then
            found_secrets=1
        fi
    fi
done

# Check if .env file is being committed
if echo "$staged_files" | grep -E "^\.env$|\.env\.|credentials|secrets" | grep -v ".env.example"; then
    echo -e "${RED}‚ùå Attempting to commit sensitive files (.env, credentials, or secrets)${NC}"
    echo -e "${YELLOW}These files should be in .gitignore${NC}"
    found_secrets=1
fi

# Check for large files that might contain data dumps
for file in $staged_files; do
    if [ -f "$file" ]; then
        size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null)
        if [ "$size" -gt 5242880 ]; then  # 5MB
            echo -e "${YELLOW}‚ö†Ô∏è  Warning: Large file detected: $file ($(($size / 1024 / 1024))MB)${NC}"
            echo "   Make sure this doesn't contain sensitive data"
        fi
    fi
done

if [ $found_secrets -eq 1 ]; then
    echo -e "${RED}"
    echo "========================================="
    echo "‚ùå COMMIT BLOCKED: Sensitive data detected"
    echo "========================================="
    echo -e "${NC}"
    echo "Please remove sensitive information before committing."
    echo "Use environment variables or .env files for secrets."
    echo ""
    echo "If this is a false positive, you can bypass with:"
    echo "  git commit --no-verify"
    echo ""
    exit 1
fi

echo -e "${GREEN}‚úÖ No sensitive information detected${NC}"
exit 0