name: AI Issue Notifier

on:
  issues:
    types: [opened, labeled, edited]
  workflow_dispatch:

jobs:
  notify-ai-issues:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'ai-assigned')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create AI task notification
        run: |
          mkdir -p ai-tasks
          
          # Create a task file for Claude to read
          cat > ai-tasks/issue-${{ github.event.issue.number }}.md << 'EOF'
          # AI Implementation Task

          **Issue Number:** #${{ github.event.issue.number }}
          **Title:** ${{ github.event.issue.title }}
          **URL:** ${{ github.event.issue.html_url }}
          **Created:** ${{ github.event.issue.created_at }}
          **Assignee:** ${{ github.event.issue.assignee.login }}
          **Labels:** ${{ join(github.event.issue.labels.*.name, ', ') }}

          ## Task Description

          ${{ github.event.issue.body }}

          ---
          *This file was automatically generated by GitHub Actions for AI implementation*
          EOF
          
      - name: Create implementation instructions
        run: |
          # Create Claude-specific instructions
          cat > CLAUDE_TASKS.md << 'EOF'
          # ðŸ¤– Claude Implementation Tasks

          This file contains AI-assigned tasks from GitHub issues. When you see this file, please check the `ai-tasks/` directory for specific implementation tasks.

          ## Current AI-Assigned Issues

          ### Issue #${{ github.event.issue.number }}: ${{ github.event.issue.title }}
          - **Status:** Open
          - **Priority:** High (DDD Implementation)
          - **File:** `ai-tasks/issue-${{ github.event.issue.number }}.md`
          
          ## Instructions for Claude

          1. Read the task file in `ai-tasks/issue-${{ github.event.issue.number }}.md`
          2. Follow the Domain-Driven Design approach specified
          3. Create the file structure as outlined
          4. Implement according to the acceptance criteria
          5. Add comments indicating which issue you're implementing

          ## Quick Start Commands

          ```bash
          # View the task
          cat ai-tasks/issue-${{ github.event.issue.number }}.md
          
          # Start implementation
          mkdir -p src/contexts src/events src/domain docs
          
          # Create event storming doc
          touch docs/event-storming.md
          ```

          Remember to follow DDD best practices and create comprehensive tests!
          EOF

      - name: Update repository with AI tasks
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          git add ai-tasks/issue-${{ github.event.issue.number }}.md CLAUDE_TASKS.md
          git commit -m "Add AI task for issue #${{ github.event.issue.number }}" || echo "No changes to commit"
          git push || echo "No changes to push"

      - name: Comment on issue
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ¤– AI Implementation Task Created
              
              An implementation task has been created for Claude:
              - Task file: \`ai-tasks/issue-${context.issue.number}.md\`
              - Instructions: \`CLAUDE_TASKS.md\`
              
              Claude will see these files in the next session and can begin implementation.
              
              ### Next Steps
              1. Claude reads the task files
              2. Implements according to DDD specifications
              3. Creates pull request with implementation
              
              *This is an automated message from the AI Issue Notifier workflow*`
            })