"""
Domain models for Zamaz Debate System
Following Domain-Driven Design principles
"""

from dataclasses import dataclass
from datetime import datetime
from typing import List, Dict, Any, Optional
from enum import Enum


class DecisionType(Enum):
    """Types of decisions that can be made"""

    SIMPLE = "simple"
    MODERATE = "moderate"
    COMPLEX = "complex"
    EVOLUTION = "evolution"


class PRStatus(Enum):
    """Status of a pull request"""

    DRAFT = "draft"
    OPEN = "open"
    MERGED = "merged"
    CLOSED = "closed"


class ImplementationAssignee(Enum):
    """Who should implement the decision"""

    CLAUDE = "claude"
    GEMINI = "gemini"
    HUMAN = "human"
    NONE = "none"


@dataclass
class Decision:
    """Value object representing a decision made by the system"""

    id: str
    question: str
    context: str
    decision_text: str
    decision_type: DecisionType
    method: str  # "direct" or "debate"
    rounds: int
    timestamp: datetime
    debate_id: Optional[str] = None
    implementation_assignee: Optional[ImplementationAssignee] = None
    implementation_complexity: Optional[str] = None  # simple, moderate, complex

    def to_dict(self) -> Dict:
        """Convert to dictionary for serialization"""
        return {
            "id": self.id,
            "question": self.question,
            "context": self.context,
            "decision_text": self.decision_text,
            "decision_type": self.decision_type.value,
            "method": self.method,
            "rounds": self.rounds,
            "timestamp": self.timestamp.isoformat(),
            "debate_id": self.debate_id,
            "implementation_assignee": (
                self.implementation_assignee.value
                if self.implementation_assignee
                else None
            ),
            "implementation_complexity": self.implementation_complexity,
        }


@dataclass
class Debate:
    """Entity representing a debate between AI agents"""

    id: str
    question: str
    context: str
    rounds: List[Dict[str, str]]  # List of {claude: str, gemini: str}
    final_decision: str
    complexity: str
    start_time: datetime
    end_time: datetime

    def get_summary(self) -> str:
        """Get a summary of the debate"""
        return f"Debate {self.id}: {self.question[:50]}... ({len(self.rounds)} rounds)"


@dataclass
class PullRequest:
    """Entity representing a GitHub pull request"""

    id: Optional[str]  # GitHub PR number
    title: str
    body: str
    branch_name: str
    base_branch: str = "main"
    assignee: str = "claude"
    labels: List[str] = None
    decision: Optional[Decision] = None
    status: PRStatus = PRStatus.DRAFT

    def __post_init__(self):
        if self.labels is None:
            self.labels = ["automated", "decision"]

    def to_github_format(self) -> Dict:
        """Format for GitHub API"""
        return {
            "title": self.title,
            "body": self.body,
            "head": self.branch_name,
            "base": self.base_branch,
            "assignee": self.assignee,
            "labels": self.labels,
        }


@dataclass
class PRTemplate:
    """Value object for PR templates"""

    decision_type: DecisionType
    title_template: str
    body_template: str

    def render(
        self, decision: Decision, debate: Optional[Debate] = None
    ) -> Dict[str, str]:
        """Render the template with decision data"""
        title = self.title_template.format(
            question=decision.question[:60],
            type=decision.decision_type.value,
            id=decision.id,
        )

        body_context = {
            "question": decision.question,
            "context": decision.context,
            "decision": decision.decision_text,
            "method": decision.method,
            "rounds": decision.rounds,
            "timestamp": decision.timestamp.isoformat(),
            "debate_summary": debate.get_summary() if debate else "No debate",
        }

        body = self.body_template.format(**body_context)

        return {"title": title, "body": body}


# Default PR templates
DEFAULT_TEMPLATES = {
    DecisionType.SIMPLE: PRTemplate(
        decision_type=DecisionType.SIMPLE,
        title_template="[Simple] {question}",
        body_template="""## Decision Summary

**Question:** {question}

**Context:** {context}

**Decision:** {decision}

**Method:** {method} (no debate required)

**Timestamp:** {timestamp}

---
ðŸ¤– This PR was automatically generated by the Zamaz Debate System
""",
    ),
    DecisionType.COMPLEX: PRTemplate(
        decision_type=DecisionType.COMPLEX,
        title_template="[Complex] {question}",
        body_template="""# ðŸŽ¯ Complex Decision Implementation

## ðŸ“‹ Summary

A complex architectural decision has been made through AI consensus debate.

**Decision Type:** `complex` | **Method:** `{method}` | **Rounds:** `{rounds}`

---

## ðŸ¤” The Question

**{question}**

### Context
```
{context}
```

---

## ðŸ’¡ Decision

{decision}

---

<details>
<summary>ðŸ¤– Full Debate Analysis (click to expand)</summary>

### Debate Summary
{debate_summary}

**Timestamp:** {timestamp}

</details>

---

## âœ… Implementation Checklist

- [ ] Review the decision and understand the rationale
- [ ] Design the implementation approach
- [ ] Implement the feature/change
- [ ] Add comprehensive tests
- [ ] Update documentation
- [ ] Ensure backward compatibility
- [ ] Run all tests and ensure they pass

---

*ðŸ¤– This PR was automatically generated by the Zamaz Debate System*
""",
    ),
    DecisionType.EVOLUTION: PRTemplate(
        decision_type=DecisionType.EVOLUTION,
        title_template="[Evolution] System self-improvement",
        body_template="""# ðŸ”„ System Evolution Request

## ðŸ“‹ Summary

The Zamaz Debate System has identified an opportunity for self-improvement through AI consensus.

**Decision Type:** `evolution` | **Complexity:** `complex` | **Method:** `{method}`

---

## ðŸŽ¯ What needs to be done?

{decision}

---

## ðŸ“Š System Context

```
{context}
```

---

<details>
<summary>ðŸ¤– AI Debate Analysis (click to expand)</summary>

### Debate Question
{question}

### Full Decision Text
{decision}

**Consensus Reached:** âœ… Yes  
**Debate Rounds:** {rounds}  
**Timestamp:** {timestamp}

</details>

---

## âœ… Implementation Checklist

- [ ] Review the proposed changes and understand the rationale
- [ ] Implement the feature following system architecture
- [ ] Add comprehensive tests for new functionality
- [ ] Update documentation as needed
- [ ] Ensure backward compatibility
- [ ] Run all tests and ensure they pass
- [ ] Consider edge cases and error scenarios

---

## ðŸ‘¥ Workflow

1. **Implementation**: Assigned to implementer
2. **Code Review**: Automated review by AI reviewer
3. **Merge**: After successful review and all checks pass

---

*ðŸ§¬ This PR was automatically generated by the Zamaz Debate System's self-evolution mechanism.*
""",
    ),
}
